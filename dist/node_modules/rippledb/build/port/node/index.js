"use strict";

exports.__esModule = true;
exports.DBRepairer = exports.Database = exports.NodeEnv = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _Database = _interopRequireDefault(require("../../src/Database"));

exports.InternalDatabase = _Database.default;

var _Env = require("../../src/Env");

exports.Env = _Env.Env;

var _DBRepairer = require("../../src/DBRepairer");

exports.InternalDBRepairer = _DBRepairer.InternalDBRepairer;

var _WriteBatch = require("../../src/WriteBatch");

exports.WriteBatch = _WriteBatch.WriteBatch;

var _cleanup = require("./cleanup");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NodeEnv {
  constructor() {
    _defineProperty(this, "onExit", _cleanup.onExit);

    _defineProperty(this, "writeFile", _fs.default.promises.writeFile);

    _defineProperty(this, "readFile", _fs.default.promises.readFile);

    _defineProperty(this, "open", _fs.default.promises.open);

    _defineProperty(this, "rename", _fs.default.promises.rename);

    _defineProperty(this, "unlink", _fs.default.promises.unlink);

    _defineProperty(this, "unlinkSync", _fs.default.unlinkSync);

    _defineProperty(this, "fstat", _fs.default.promises.fstat);
  }

  platform() {
    return _os.default.platform();
  }
  /**
   * get current time
   */


  now() {
    return Number(process.hrtime.bigint()) / Math.pow(10, 9);
  }

  access(dbpath) {
    return _fs.default.promises.access(dbpath, _fs.default.constants.W_OK);
  }

  mkdir(dbpath) {
    return _fs.default.promises.mkdir(dbpath, {
      recursive: true
    });
  }

  // eslint-disable-next-line
  readdir(dbpath) {
    return _fs.default.promises.readdir(dbpath, {
      withFileTypes: true
    });
  }

  async infoLog(handle, message) {
    const finalMessage = `${new Date().toISOString()} ${message}\n`;
    await handle.appendFile(finalMessage);
  }

  async getFileSize(filename) {
    const stat = await _fs.default.promises.stat(filename);
    return stat.size;
  }

}

exports.NodeEnv = NodeEnv;

class Database extends _Database.default {
  constructor(dbpath, options = {}) {
    if (!options.env) options.env = new NodeEnv();
    super(dbpath, options);
  }

}

exports.Database = Database;

class DBRepairer extends _DBRepairer.InternalDBRepairer {
  constructor(dbpath, options = {}) {
    if (!options.env) options.env = new NodeEnv();
    super(dbpath, options);
  }

}

exports.DBRepairer = DBRepairer;
//# sourceMappingURL=index.js.map