"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Buffer = require("./Buffer");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BitBuffer {
  /**
   * Buffer length should be Math.ceil(bits / 8)
   */
  constructor(buffer) {
    _defineProperty(this, "_size", void 0);

    _defineProperty(this, "_buffer", void 0);

    this._buffer = buffer;
    this._size = buffer.length;
  }

  get buffer() {
    return this._buffer;
  }

  get size() {
    return this._size;
  }

  get bits() {
    // return (this.size - (this.size % 8)) * 8
    return this.size * 8;
  }

  resizeBits(bits) {
    const nextSize = Math.ceil(bits / 8);

    if (nextSize > this.size) {
      this._buffer = _Buffer.Buffer.concat([this._buffer, _Buffer.Buffer.alloc(nextSize - this.size)]);
      this._size = this._buffer.length;
    } else if (nextSize < this.size) {
      this._buffer = this._buffer.slice(0, nextSize);
      this._size = this._buffer.length;
    }
  }

  set(index, bool) {
    const pos = index >>> 3;

    if (bool) {
      this._buffer[pos] |= 1 << index % 8;
    } else {
      this._buffer[pos] &= ~(1 << index % 8);
    }
  }

  toggle(index) {
    this._buffer[index >>> 3] ^= 1 << index % 8;
  }

  get(index) {
    return (this._buffer[index >>> 3] & 1 << index % 8) !== 0;
  }

  toString() {
    let str = "";

    for (let i = 0; i < this.bits; i++) {
      str += this.get(i) ? "1" : "0";
    }

    return str;
  }

}

exports.default = BitBuffer;
//# sourceMappingURL=BitBuffer.js.map