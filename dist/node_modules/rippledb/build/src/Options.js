"use strict";

exports.__esModule = true;
exports.defaultOptions = exports.defaultWriteOptions = exports.defaultIteratorOptions = exports.defaultReadOptions = void 0;

var _Comparator = require("./Comparator");

var _BloomFilter = _interopRequireDefault(require("./BloomFilter"));

var _Cache = _interopRequireDefault(require("./Cache"));

var _Buffer = require("./Buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2018-present, heineiuo.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const defaultReadOptions = {
  verifyChecksums: false,
  fillCache: true
};
exports.defaultReadOptions = defaultReadOptions;
const defaultIteratorOptions = {
  reverse: false,
  start: _Buffer.Buffer.alloc(0),
  ...defaultReadOptions
};
exports.defaultIteratorOptions = defaultIteratorOptions;
const defaultWriteOptions = {
  sync: false
};
exports.defaultWriteOptions = defaultWriteOptions;
const defaultOptions = {
  comparator: new _Comparator.BytewiseComparator(),
  writeBufferSize: 4 * 1024 * 1024,
  maxFileSize: 2 * 1024 * 1024,
  maxOpenFiles: 1000,
  blockCache: new _Cache.default({
    max: 2048
  }),
  blockSize: 4 * 1024,
  blockRestartInterval: 16,
  reuseLogs: false,
  filterPolicy: new _BloomFilter.default(),
  debug: false,
  lockfileStale: 10000,
  infoLog: null,

  async log(message) {
    if (this.infoLog) await this.infoLog.appendFile(message + "\n");
  }

};
exports.defaultOptions = defaultOptions;
//# sourceMappingURL=Options.js.map