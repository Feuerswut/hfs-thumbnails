"use strict";

exports.__esModule = true;
exports.default = void 0;

var _VersionFormat = require("./VersionFormat");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class VersionEdit {
  // compact_pointer_ is a string  which record this level latest
  // compaction file's largest keyï¼Œdefault is empty
  // _comparator: comparator name
  constructor() {
    _defineProperty(this, "compactPointers", void 0);

    _defineProperty(this, "deletedFiles", void 0);

    _defineProperty(this, "newFiles", void 0);

    _defineProperty(this, "_comparator", void 0);

    _defineProperty(this, "_logNumber", void 0);

    _defineProperty(this, "_prevLogNumber", void 0);

    _defineProperty(this, "_lastLogNumber", void 0);

    _defineProperty(this, "_lastSequence", void 0);

    _defineProperty(this, "_nextFileNumber", void 0);

    _defineProperty(this, "_hasComparator", void 0);

    _defineProperty(this, "_hasLogNumber", void 0);

    _defineProperty(this, "_hasPrevLogNumber", void 0);

    _defineProperty(this, "_hasNextFileNumber", void 0);

    _defineProperty(this, "_hasLastSequence", void 0);

    this._comparator = "";
    this.deletedFiles = [];
    this.newFiles = [];
    this.compactPointers = [];
  }

  clear() {
    this.deletedFiles = [];
    this.newFiles = [];
    this.compactPointers = [];
    this._logNumber = 0;
    this._prevLogNumber = 0;
    this._lastSequence = 0n; // sstable file number

    this._nextFileNumber = 0;
    this._comparator = "";
    this._lastLogNumber = 0;
    this._hasComparator = false;
    this._hasLogNumber = false;
    this._hasPrevLogNumber = false;
    this._hasNextFileNumber = false;
    this._hasLastSequence = false;
  }

  set comparator(value) {
    this._comparator = value;
    this._hasComparator = true;
  }

  get comparator() {
    return this._comparator;
  }

  set logNumber(value) {
    this._logNumber = value;
    this._hasLogNumber = true;
  }

  get logNumber() {
    return this._logNumber || 0;
  }

  set prevLogNumber(value) {
    this._prevLogNumber = value;
    this._hasPrevLogNumber = true;
  }

  get prevLogNumber() {
    return this._prevLogNumber || 0;
  }

  set nextFileNumber(value) {
    this._nextFileNumber = value;
    this._hasNextFileNumber = true;
  }

  get nextFileNumber() {
    return this._nextFileNumber || 0;
  }

  set lastSequence(value) {
    this._lastSequence = value;
    this._hasLastSequence = true;
  }

  get lastSequence() {
    return this._lastSequence || 0n;
  }

  get hasComparator() {
    return this._hasComparator || false;
  }

  get hasLogNumber() {
    return this._hasLogNumber || false;
  }

  get hasPrevLogNumber() {
    return this._hasPrevLogNumber || false;
  }

  get hasNextFileNumber() {
    return this._hasNextFileNumber || false;
  }

  get hasLastSequence() {
    return this._hasLastSequence || false;
  } // Delete the specified "file" from the specified "level".


  deleteFile(level, fileNum) {
    this.deletedFiles.push({
      level,
      fileNum
    });
  } // Add the specified file at the specified number.
  // REQUIRES: This version has not been saved (see VersionSet::SaveTo)
  // REQUIRES: "smallest" and "largest" are smallest and largest keys in file


  addFile(level, fileNum, fileSize, smallest, largest) {
    const f = new _VersionFormat.FileMetaData();
    f.number = fileNum;
    f.fileSize = fileSize;
    f.smallest = smallest;
    f.largest = largest;
    this.newFiles.push({
      level,
      fileMetaData: f
    });
  }

  setCompactPointer(level, internalKey) {
    this.compactPointers.push({
      level,
      internalKey
    });
  }

}

exports.default = VersionEdit;
//# sourceMappingURL=VersionEdit.js.map