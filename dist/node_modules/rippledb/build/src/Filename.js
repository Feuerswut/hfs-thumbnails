"use strict";

exports.__esModule = true;
exports.getCurrentFilename = getCurrentFilename;
exports.getLogFilename = getLogFilename;
exports.getTableFilename = getTableFilename;
exports.getManifestFilename = getManifestFilename;
exports.getLockFilename = getLockFilename;
exports.getInfoLogFilename = getInfoLogFilename;
exports.getOldInfoLogFilename = getOldInfoLogFilename;
exports.getTempFilename = getTempFilename;
exports.parseFilename = parseFilename;
exports.setCurrentFile = setCurrentFile;

var _DBHelper = require("./DBHelper");

var _Format = require("./Format");

/**
 * Copyright (c) 2018-present, heineiuo.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function numberToString(num) {
  let str = String(num);

  while (str.length < 6) {
    str = `0${str}`;
  }

  return str;
}

function getCurrentFilename(dbpath) {
  return _DBHelper.path.resolve(dbpath, "CURRENT");
}

function getLogFilename(dbpath, logNumber) {
  return _DBHelper.path.resolve(dbpath, `${numberToString(logNumber)}.log`);
}

function getTableFilename(dbpath, tableNumber) {
  return _DBHelper.path.resolve(dbpath, `${numberToString(tableNumber)}.ldb`);
}

function getManifestFilename(dbpath, manifestNumber) {
  return _DBHelper.path.resolve(dbpath, `MANIFEST-${numberToString(manifestNumber)}`);
}

function getLockFilename(dbpath) {
  return _DBHelper.path.resolve(dbpath, `LOCK`);
}

function getInfoLogFilename(dbpath) {
  return _DBHelper.path.resolve(dbpath, `LOG`);
}

function getOldInfoLogFilename(dbpath) {
  return _DBHelper.path.resolve(dbpath, `LOG.old`);
}

function getTempFilename(dbpath, number) {
  (0, _DBHelper.assert)(number > 0);
  return _DBHelper.path.resolve(dbpath, `${number}.dbtmp`);
}

function parseFilename(filename) {
  const internalFile = {
    isInternalFile: true
  };

  if (filename === "CURRENT") {
    internalFile.number = 0;
    internalFile.type = _Format.FileType.kCurrentFile;
  } else if (filename === "LOCK") {
    internalFile.number = 0;
    internalFile.type = _Format.FileType.kDBLockFile;
  } else if (filename === "LOG" || filename === "LOG.old") {
    internalFile.number = 0;
    internalFile.type = _Format.FileType.kInfoLogFile;
  } else if (filename.startsWith("MANIFEST-")) {
    const num = Number(filename.substr("MANIFEST-".length));

    if (isNaN(num)) {
      internalFile.isInternalFile = false;
      return internalFile;
    }

    internalFile.number = num;
    internalFile.type = _Format.FileType.kDescriptorFile;
  } else {
    const num = Number(filename.split(".")[0]);

    if (isNaN(num)) {
      internalFile.isInternalFile = false;
      return internalFile;
    }

    const suffix = filename.substr(filename.split(".")[0].length);

    if (suffix === ".log") {
      internalFile.type = _Format.FileType.kLogFile;
    } else if (suffix === ".ldb") {
      internalFile.type = _Format.FileType.kTableFile;
    } else if (suffix === ".dbtmp") {
      internalFile.type = _Format.FileType.kTempFile;
    } else {
      internalFile.isInternalFile = false;
      return internalFile;
    }

    internalFile.number = num;
  }

  return internalFile;
}

async function setCurrentFile(env, dbpath, manifestNumber) {
  const filename = getManifestFilename(dbpath, manifestNumber);
  (0, _DBHelper.assert)(filename.startsWith(_DBHelper.path.resolve(dbpath + "/")));
  const content = filename.substr(_DBHelper.path.resolve(dbpath + "/").length + 1);
  const tempFilename = getTempFilename(dbpath, manifestNumber);
  let error;

  try {
    await env.writeFile(tempFilename, content + "\n");
  } catch (e) {
    error = e;
  }

  if (!error) {
    await env.rename(tempFilename, getCurrentFilename(dbpath));
  } else {
    await env.unlink(tempFilename);
  }

  return error;
}
//# sourceMappingURL=Filename.js.map