"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Crc = require("./Crc32");

var _Buffer = require("./Buffer");

var _DBHelper = require("./DBHelper");

var _Slice = _interopRequireDefault(require("./Slice"));

var _Format = require("./Format");

var _VersionEdit = _interopRequireDefault(require("./VersionEdit"));

var _VersionFormat = require("./VersionFormat");

var _LogFormat = require("./LogFormat");

var _Coding = require("./Coding");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class VersionEditRecord {
  static from(buf) {
    const length = buf.readUInt16BE(4);
    const type = buf.readUInt8(6);
    const data = new _Slice.default(buf.slice(7, 7 + length));
    (0, _DBHelper.assert)(length === data.length);
    const record = new VersionEditRecord(type, data);
    return record;
  }

  static add(edit) {
    const bufList = [];

    if (edit.hasComparator) {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kComparator]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(edit.comparator.length)));
      bufList.push(_Buffer.Buffer.fromUnknown(edit.comparator));
    }

    if (edit.hasLogNumber) {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kLogNumber]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(edit.logNumber)));
    }

    if (edit.hasPrevLogNumber) {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kPrevLogNumber]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(edit.prevLogNumber)));
    }

    if (edit.hasNextFileNumber) {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kNextFileNumber]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(edit.nextFileNumber)));
    }

    if (edit.hasLastSequence) {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kLastSequence]));
      bufList.push((0, _Coding.encodeFixed64)(edit.lastSequence));
    }

    edit.compactPointers.forEach(pointer => {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kCompactPointer]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(pointer.level)));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(pointer.internalKey.length)));
      bufList.push(pointer.internalKey.buffer);
    });
    edit.deletedFiles.forEach(file => {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kDeletedFile]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.level)));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.fileNum)));
    });
    edit.newFiles.forEach(file => {
      bufList.push(_Buffer.Buffer.fromArrayLike([_Format.VersionEditTag.kNewFile]));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.level)));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.fileMetaData.number)));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.fileMetaData.fileSize)));
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.fileMetaData.smallest.length)));
      bufList.push(file.fileMetaData.smallest.buffer);
      bufList.push(_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(file.fileMetaData.largest.length)));
      bufList.push(file.fileMetaData.largest.buffer);
    });
    return new _Slice.default(_Buffer.Buffer.concat(bufList));
  }

  static decode(opSlice) {
    let index = 0;
    const edit = new _VersionEdit.default();
    const opBuffer = opSlice.buffer;

    while (index < opSlice.length) {
      const type = opBuffer.readUInt8(index);
      index += 1;

      if (type === _Format.VersionEditTag.kComparator) {
        const comparatorNameLength = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        const comparatorName = opBuffer.slice(index, index + comparatorNameLength);
        index += comparatorNameLength;
        edit.comparator = comparatorName.toString();
        continue;
      } else if (type === _Format.VersionEditTag.kLogNumber) {
        const logNumber = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        edit.logNumber = logNumber;
        continue;
      } else if (type === _Format.VersionEditTag.kPrevLogNumber) {
        const prevLogNumber = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        edit.prevLogNumber = prevLogNumber;
        continue;
      } else if (type === _Format.VersionEditTag.kNextFileNumber) {
        const nextFileNumber = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        edit.nextFileNumber = nextFileNumber;
        continue;
      } else if (type === _Format.VersionEditTag.kLastSequence) {
        const lastSequence = (0, _Coding.decodeFixed64)(opBuffer.slice(index));
        index += 8;
        edit.lastSequence = lastSequence;
        continue;
      } else if (type === _Format.VersionEditTag.kCompactPointer) {
        const level = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;

        const internalKeyLength = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        (0, _DBHelper.assert)(opBuffer.length >= index + internalKeyLength);
        const internalKey = new _Slice.default(opBuffer.slice(index, index + internalKeyLength));
        index += internalKeyLength;
        edit.compactPointers.push({
          level,
          internalKey: new _Format.InternalKey(internalKey)
        });
        continue;
      } else if (type === _Format.VersionEditTag.kDeletedFile) {
        const level = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;

        const fileNum = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        edit.deletedFiles.push({
          level,
          fileNum
        });
        continue;
      } else if (type === _Format.VersionEditTag.kNewFile) {
        const level = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;

        const fileNum = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;

        const fileSize = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;

        const smallestKeyLength = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        const smallestKey = opBuffer.slice(index, index + smallestKeyLength);
        index += smallestKeyLength;

        const largestKeyLength = _DBHelper.varint.decode(opBuffer.slice(index));

        index += _DBHelper.varint.decode.bytes;
        const largestKey = opBuffer.slice(index, index + largestKeyLength);
        index += largestKeyLength;
        const fileMetaData = new _VersionFormat.FileMetaData();
        fileMetaData.number = fileNum;
        fileMetaData.fileSize = fileSize;
        fileMetaData.smallest = _Format.InternalKey.from(new _Slice.default(smallestKey));
        fileMetaData.largest = _Format.InternalKey.from(new _Slice.default(largestKey));
        edit.newFiles.push({
          level,
          fileMetaData
        });
        continue;
      }
    }

    return edit;
  }

  constructor(type, data) {
    _defineProperty(this, "data", void 0);

    _defineProperty(this, "type", void 0);

    this.type = type;
    this.data = new _Slice.default(data);
  }

  get length() {
    return this.data.length + 7;
  }

  get size() {
    return this.length;
  }

  get buffer() {
    const lengthBuf = _Buffer.Buffer.fromHex((0, _LogFormat.createHexStringFromDecimal)(this.data.length));

    const typeBuf = _Buffer.Buffer.fromArrayLike([this.type]);

    const sum = (0, _Crc.crc32)(_Buffer.Buffer.concat([typeBuf, this.data.buffer]));
    return _Buffer.Buffer.concat([sum, lengthBuf, typeBuf, this.data.buffer]);
  }

}

exports.default = VersionEditRecord;
//# sourceMappingURL=VersionEditRecord.js.map