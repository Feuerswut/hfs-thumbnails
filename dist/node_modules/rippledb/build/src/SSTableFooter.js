"use strict";

exports.__esModule = true;
exports.default = void 0;

var _DBHelper = require("./DBHelper");

var _Buffer = require("./Buffer");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * fill in end of table, fixed 48 bytesï¼Œ
 * include offset, size of data index block and meta index block
 *
 * read sstable from footer
 */
class TableFooter {
  constructor(buffer) {
    _defineProperty(this, "_buffer", void 0);

    (0, _DBHelper.assert)(buffer.length === 48);
    this._buffer = buffer;
  }

  get indexHandle() {
    const data = this.get();
    const handle = {
      offset: data.indexOffset,
      size: data.indexSize
    };
    return handle;
  }

  get metaIndexHandle() {
    const data = this.get();
    const handle = {
      offset: data.metaIndexOffset,
      size: data.metaIndexSize
    };
    return handle;
  }

  get buffer() {
    return this._buffer;
  }

  set metaIndexOffset(value) {
    const data = { ...this.get(),
      metaIndexOffset: value
    };
    this.put(data);
  }

  set metaIndexSize(value) {
    const data = { ...this.get(),
      metaIndexSize: value
    };
    this.put(data);
  }

  set indexOffset(value) {
    const data = { ...this.get(),
      indexOffset: value
    };
    this.put(data);
  }

  set indexSize(value) {
    const data = { ...this.get(),
      indexSize: value
    };
    this.put(data);
  }

  get() {
    const buf = this.buffer;

    if (!buf) {
      return {
        metaIndexOffset: 0,
        metaIndexSize: 0,
        indexOffset: 0,
        indexSize: 0
      };
    }

    let position = 0;

    const metaIndexOffset = _DBHelper.varint.decode(buf, position);

    position += _DBHelper.varint.decode.bytes;

    const metaIndexSize = _DBHelper.varint.decode(buf, position);

    position += _DBHelper.varint.decode.bytes;

    const indexOffset = _DBHelper.varint.decode(buf, position);

    position += _DBHelper.varint.decode.bytes;

    const indexSize = _DBHelper.varint.decode(buf, position);

    return {
      metaIndexOffset,
      metaIndexSize,
      indexOffset,
      indexSize
    };
  }

  put(data) {
    const handlers = _Buffer.Buffer.concat([_Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(data.metaIndexOffset)), _Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(data.metaIndexSize)), _Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(data.indexOffset)), _Buffer.Buffer.fromArrayLike(_DBHelper.varint.encode(data.indexSize))]);

    const paddingBuf = _Buffer.Buffer.alloc(40 - handlers.length);

    this._buffer = _Buffer.Buffer.concat([handlers, paddingBuf, _Buffer.Buffer.alloc(8)]);
  }

}

exports.default = TableFooter;

_defineProperty(TableFooter, "kEncodedLength", 48);
//# sourceMappingURL=SSTableFooter.js.map