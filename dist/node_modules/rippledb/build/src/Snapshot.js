"use strict";

exports.__esModule = true;
exports.SnapshotList = exports.Snapshot = void 0;

var _DBHelper = require("./DBHelper");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Snapshot {
  constructor(sn) {
    _defineProperty(this, "_sequenceNumber", void 0);

    _defineProperty(this, "_next", void 0);

    _defineProperty(this, "_prev", void 0);

    this._sequenceNumber = sn;
  }

  get sequenceNumber() {
    return this._sequenceNumber;
  }

}

exports.Snapshot = Snapshot;

class SnapshotList {
  constructor() {
    _defineProperty(this, "_head", void 0);

    this._head = new Snapshot(0n);
    this._head._next = this._head;
    this._head._prev = this._head;
  }

  isEmpty() {
    return this._head._next === this._head;
  }

  newest() {
    (0, _DBHelper.assert)(!this.isEmpty());
    return this._head._prev;
  }

  oldest() {
    (0, _DBHelper.assert)(!this.isEmpty());
    return this._head._next;
  } // insert before _head


  insert(sn) {
    (0, _DBHelper.assert)(this.isEmpty() || this.newest()._sequenceNumber <= sn);
    const snapshot = new Snapshot(sn);
    snapshot._next = this._head;
    snapshot._prev = this._head._prev;
    snapshot._prev._next = snapshot;
    snapshot._next._prev = snapshot;
    return snapshot;
  }

  delete(snapshot) {
    const next = snapshot._next;
    const prev = snapshot._prev;
    next._prev = prev;
    prev._next = next;
  }

}

exports.SnapshotList = SnapshotList;
//# sourceMappingURL=Snapshot.js.map